[versions]
jetty = "9.4.57.v20241219"
jersey = "2.46"
jackson = "2.18.2"
# When upgrading JaCoCo to a newer version make sure to
# check the comment in the OpenAnalyzer.java, JaCoCoPreMain.java and CachingInstructionsBuilder.java
# and update the internal_xxxxxx hash included in the imports in LenientCoverageTransformer.java and JaCoCoPreMain.java.
jacoco = "0.8.12"
# We need to stay on the 1.3.x release line as 1.4.x requires Java 11
logback = "1.3.15"
retrofit = "2.11.0"
junit = "5.12.0"
junitPlatform = "1.12.0"
okhttp = "4.12.0"
mockito = "5.15.2"
mockitoKotlin = "5.4.0"
picocli = "4.7.6"
maven = "3.9.9"

[libraries]
jetty-server = { module = "org.eclipse.jetty:jetty-server", version.ref = "jetty" }
jetty-servlet = { module = "org.eclipse.jetty:jetty-servlet", version.ref = "jetty" }

jersey-server = { module = "org.glassfish.jersey.core:jersey-server", version.ref = "jersey" }
jersey-containerJettyHttp = { module = "org.glassfish.jersey.containers:jersey-container-jetty-http", version.ref = "jersey" }
jersey-containerServletCore = { module = "org.glassfish.jersey.containers:jersey-container-servlet-core", version.ref = "jersey" }
jersey-mediaJsonJackson = { module = "org.glassfish.jersey.media:jersey-media-json-jackson", version.ref = "jersey" }
jersey-hk2 = { module = "org.glassfish.jersey.inject:jersey-hk2", version.ref = "jersey" }

jackson-bom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-jakarta-xmlbindAnnotations = { module = "com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations", version.ref = "jackson" }
jackson-jakarta-rsJsonProvider = { module = "com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider", version.ref = "jackson" }

jakarta-activation-api = { module = "jakarta.activation:jakarta.activation-api", version = "1.2.2" }

jacoco-core = { module = "org.jacoco:org.jacoco.core", version.ref = "jacoco" }
jacoco-report = { module = "org.jacoco:org.jacoco.report", version.ref = "jacoco" }
jacoco-agent = { module = "org.jacoco:org.jacoco.agent", version.ref = "jacoco" }

logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-converter-jackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit" }

okhttp-core = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

spark = { module = "com.sparkjava:spark-core", version = "2.9.4" }
jcommander = { module = "com.beust:jcommander", version = "1.82" }
teamscaleLibCommons = { module = "com.teamscale:teamscale-lib-commons", version = "9.4.1" }
commonsCodec = { module = "commons-codec:commons-codec", version = "1.18.0" }
commonsLang = { module = "org.apache.commons:commons-lang3", version = "3.17.0" }
commonsIo = { module = "commons-io:commons-io", version = "2.18.0" }
slf4j-api = { module = "org.slf4j:slf4j-api", version = "2.0.16" }
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version = "7.1.0.202411261347-r" }
okio = { module = "com.squareup.okio:okio", version = "3.10.2" }

picocli-core = { module = "info.picocli:picocli", version.ref = "picocli" }
picocli-codegen = { module = "info.picocli:picocli-codegen", version.ref = "picocli" }
jna-platform = { module = "net.java.dev.jna:jna-platform", version = "5.16.0" }

log4j-core = { module = "org.apache.logging.log4j:log4j-core", version = "2.24.3" }

junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junitPlatform" }
junit-platform-engine = { module = "org.junit.platform:junit-platform-engine", version.ref = "junitPlatform" }
junit-platform-commons = { module = "org.junit.platform:junit-platform-commons", version.ref = "junitPlatform" }

junit4 = { module = "junit:junit", version = "4.13.2" }
assertj = { module = "org.assertj:assertj-core", version = "3.27.3" }
jsonassert = { module = "org.skyscreamer:jsonassert", version = "1.5.3" }

mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }

springboot-loader = { module = "org.springframework.boot:spring-boot-loader", version = "3.4.3" }

maven-core = { module = "org.apache.maven:maven-core", version.ref = "maven" }
maven-pluginApi = { module = "org.apache.maven:maven-plugin-api", version.ref = "maven" }
maven-pluginAnnotations = { module = "org.apache.maven.plugin-tools:maven-plugin-annotations", version = "3.15.1" }

[plugins]
versions = { id = "com.github.ben-manes.versions", version = "0.52.0" }
markdownToPdf = { id = "de.fntsoftware.gradle.markdown-to-pdf", version = "1.1.0" }
nexusPublish = { id = "io.github.gradle-nexus.publish-plugin", version = "2.0.0" }
pluginPublish = { id = "com.gradle.plugin-publish", version = "1.3.1" }
gitProperties = { id = "com.gorylenko.gradle-git-properties", version = "2.4.2" }
mavenPluginDevelopment = { id = "org.gradlex.maven-plugin-development", version = "1.0.3" }
