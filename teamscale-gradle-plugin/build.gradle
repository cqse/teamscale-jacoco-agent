plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.3.21'
	id 'java'
	id 'java-gradle-plugin'
	id 'maven'
}

gradlePlugin {
	plugins {
		teamscale {
			id = "teamscale"
			implementationClass = "com.teamscale.TeamscalePlugin"
		}
	}
}

version pluginVersion

dependencies {
	implementation project(':teamscale-client')
	implementation project(':report-generator')

	implementation gradleApi()
	implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.21'

	implementation 'org.eclipse.jgit:org.eclipse.jgit:5.0.2.201807311906-r'
	implementation 'com.squareup.retrofit2:converter-moshi:2.5.0'

	testImplementation 'junit:junit:4.12'
	testImplementation 'org.assertj:assertj-core:3.8.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'

	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.4.0'
}

test {
	testLogging.exceptionFormat "full"
}

// At the moment we are stuck with the old maven plugin until support for private key
// files is added or we add a dedicated user with a password to our server.
// https://github.com/gradle/gradle/issues/1263
uploadArchives {
	repositories {
		mavenDeployer {
			configuration = configurations.deployerJars
			repository(url: cqseMavenRepositoryUrl) {
				authentication(userName: cqseMavenRepositoryUser, privateKey: cqseMavenRepositoryPrivateKey)
			}
		}
	}
}

processResources {
	filesMatching('**/plugin.properties') {
		filter {
			it.replace('%AGENT_VERSION_TOKEN_REPLACED_DURING_BUILD%', rootProject.appVersion)
					.replace('%PLUGIN_VERSION_TOKEN_REPLACED_DURING_BUILD%', rootProject.pluginVersion)
		}
	}
}
