name: Build

on:
  push:
    branches: '**'
    tags: 'v*'
  pull_request:
    branches: '**'

jobs:
  build-linux:
    name: Build Linux & Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Build with Gradle
      run: ./gradlew build
    - name: Upload Release Assets
      if: startsWith(github.ref, 'refs/tags/v')
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: '{agent/build/distributions/teamscale-jacoco-agent.zip,javaws-wrapper/build/distributions/javaws.zip}'
        file_glob: true
        overwrite: true
    - name: Publish to Gradle Plugin Portal
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        ./gradlew publishPlugins \
          -Psigning.secretKeyRingFile=${{ github.workspace }}/.gnupg/secring.gpg \
          -Psigning.password=${{ secrets.MAVEN_CENTRAL_GPG_SIGNATURE }} \
          -Psigning.keyId=4FB80B8E \
          -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} \
          -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}
    - name: Publish Maven Plugin to Maven Central
      if: always() && startsWith(github.ref, 'refs/tags/v')
      run: |
        ./gradlew :teamscale-maven-plugin:publishMavenPublicationToSonatypeRepository closeAndReleaseSonatypeStagingRepository \
          -Psigning.secretKeyRingFile=${{ github.workspace }}/.gnupg/secring.gpg \
          -PgpgDirectory=${{ github.workspace }}/.gnupg \
          -Psigning.password=${{ secrets.MAVEN_CENTRAL_GPG_SIGNATURE }} \
          -Psigning.keyId=4FB80B8E \
          -PsonatypeUsername=${{ secrets.SONATYPE_USER }} \
          -PsonatypePassword=${{ secrets.SONATYPE_PASSWORD }}
    - name: Publish to Maven Central
      if: always() && startsWith(github.ref, 'refs/tags/v')
      run: |
        ./gradlew publishMavenPublicationToSonatypeRepository closeAndReleaseSonatypeStagingRepository \
          -x :teamscale-maven-plugin:publishMavenPublicationToSonatypeRepository \
          -Psigning.secretKeyRingFile=${{ github.workspace }}/.gnupg/secring.gpg \
          -PgpgDirectory=${{ github.workspace }}/.gnupg \
          -Psigning.password=${{ secrets.MAVEN_CENTRAL_GPG_SIGNATURE }} \
          -Psigning.keyId=4FB80B8E \
          -PsonatypeUsername=${{ secrets.SONATYPE_USER }} \
          -PsonatypePassword=${{ secrets.SONATYPE_PASSWORD }}
    - name: Upload coverage to Teamscale
      if: always() && github.event_name == 'push'
      uses: cqse/teamscale-upload-action@v2.8.2
      with:
        server: 'https://cqse.teamscale.io'
        project: 'teamscale-jacoco-agent'
        user: ${{ secrets.CQSE_TEAMSCALE_IO_USER }}
        accesskey: ${{ secrets.CQSE_TEAMSCALE_IO_ACCESSKEY }}
        partition: 'Coverage'
        format: 'JACOCO'
        message: 'Coverage'
        files: '**/jacocoTestReport.xml'

  test-windows:
    name: Test on Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
    - name: Build with Gradle
      run: ./gradlew build
    - name: Upload coverage to Teamscale
      if: always() && github.event_name == 'push'
      uses: cqse/teamscale-upload-action@v2.8.2
      with:
        server: 'https://cqse.teamscale.io'
        project: 'teamscale-jacoco-agent'
        user: ${{ secrets.CQSE_TEAMSCALE_IO_USER }}
        accesskey: ${{ secrets.CQSE_TEAMSCALE_IO_ACCESSKEY }}
        partition: 'Coverage Windows'
        format: 'JACOCO'
        message: 'Coverage Windows'
        files: '**/jacocoTestReport.xml'

  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: cqse/teamscale-jacoco-agent
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        file: 'agent/src/docker/Dockerfile'
        push: ${{ startsWith(github.ref, 'refs/tags/v') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
