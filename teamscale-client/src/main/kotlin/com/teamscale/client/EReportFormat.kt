package com.teamscale.client

/**
 * Enum of report formats.
 * This is the subset of the report formats supported by Teamscale that the plugin currently implements support for.
 * See https://docs.teamscale.com/reference/upload-formats-and-samples/#supported-formats-for-upload
 */
enum class EReportFormat(
	/** Each ReportFormat needs a readable name for the UI  */
	val readableName: String
) {
	/** Astree xml report format.  */
	ASTREE("Astree"),

	/** JaCoCo (Java Code Coverage) xml report format.  */
	JACOCO("JaCoCo"),

	/** Cobertura (Java test coverage) xml report format.  */
	COBERTURA("Cobertura"),

	/** Gcov (Profiling tool for code compiled with gcc) report format.  */
	GCOV("Gcov"),

	/** Lcov (Linux Test Project (LTP) front-end for Gcov) report format.  */
	LCOV("Lcov"),

	/** Ctc (Testwell CTC++ coverage for C/C++) report format.  */
	CTC("Testwell CTC++"),

	/** XR.Baboon (code coverage for C# on Mono) report format.  */
	XR_BABOON("XR.Baboon"),

	/** MS Coverage report format (CQSE Coverage Merger).  */
	MS_COVERAGE("MS Coverage"),

	/** MS Coverage report format (Visual Studio Coverage Merger).  */
	VS_COVERAGE("VS Coverage"),

	/** dotCover (Jetbrains coverage tool for .NET) report format.  */
	DOT_COVER("dotCover"),

	/** Roslyn (Microsoft .NET) report format.  */
	ROSLYN("Roslyn"),

	/** Golang coverage report format @see https://golang.org/cmd/cover/  */
	GOLANG_COVERAGE("Go Cover"),

	/** Simple coverage report format for testing.  */
	SIMPLE("Teamscale Simple Coverage"),

	/** Cppcheck (static analysis for C/C++) results in XML format.  */
	CPPCHECK("Cppcheck"),

	/** PClint/FlexeLint (C/C++) coverage report format.  */
	PCLINT("PClint/FlexeLint"),

	/** Clang (C, C++, Objective C/C++) findings report format.  */
	CLANG("Clang"),

	/** Pylint (static analysis for Python) findings report format.  */
	PYLINT("Pylint"),

	/**
	 * FindBugs (static analysis for Java) findings report format. SpotBugs is the
	 * successor fork of the now unmaintained FindBugs.
	 *
	 * SpotBugs is almost completely compatible to the old FindBugs reports. The
	 * only change so far was
	 * https://github.com/spotbugs/spotbugs/commit/ea791376d60c92bf83c634bb6ea84c699fa7b453#diff-c673820b9f0388af8baf2703ef924c6b
	 * (they removed a dependency on jFormatString, can't generate some findings any
	 * more, and removed them from messages.xml and findbugs.xml) and changes of
	 * finding messages ("FindBugs" to "SpotBugs"). We handle these renamings in
	 * EAnalysisProfileVersion#ANALYSIS_PROFILE_VERSION_52. We support the old
	 * FindBugs-only findings, new SpotBugs-only findings, and common findings with
	 * the improved messages from SpotBugs.
	 */
	FINDBUGS("FindBugs/SpotBugs"),

	/** Bullseye (C++) coverage report format.  */
	BULLSEYE("Bullseye"),

	/**
	 * CQSE custom format for multiple line coverage reports that should be converted to testwise
	 * coverage.
	 */
	RAW_TESTWISE("Raw Testwise Coverage"),

	/** FxCop (.NET) findings report format.  */
	FXCOP("FxCop"),

	/** SpCop (Sharepoint Code Analysis) findings report format.  */
	SPCOP("SpCop"),

	/** JUnit (Java unit tests) report format.  */
	JUNIT("JUnit"),

	/** Boost.Test report format. */
	BOOST_TEST("Boost.Test"),

	/** XUnit (.NET unit tests) report format.  */
	XUNIT("XUnit"),

	/** MS Test report format.  */
	MS_TEST("MSTest"),

	/** C# Compiler warnings format  */
	CS_COMPILER_WARNING("C# Compiler Warning"),

	/** Simulink Model Advisor report format.  */
	MODEL_ADVISOR("Simulink Model Advisor"),

	/** CSV issues report format  */
	ISSUE_CSV("CSV Issues"),

	/** CSV spec items report format  */
	REQUIREMENTS_CSV("CSV Spec Items"),

	/** Our own export format for SAP code inspector findings.  */
	SAP_CODE_INSPECTOR("SAP Code Inspector Export"),

	SAP_COVERAGE("SAP Coverage"),

	/** Custom testwise coverage report format.  */
	TESTWISE_COVERAGE("Testwise Coverage"),

	/** Line coverage data in txt format from Xcode (xccov).  */
	XCODE("Xcode Coverage"),

	/** Clover test coverage  */
	CLOVER("Clover"),

	/** OpenCover test coverage  */
	OPEN_COVER("OpenCover"),

	/**
	 * Proprietary coverage format developed by Engel for upload of IEC coverage.
	 */
	IEC_COVERAGE("IEC Coverage"),

	/** LLVM coverage report format.  */
	LLVM("LLVM Coverage"),

	/** Our own generic finding format.  */
	GENERIC_FINDINGS("Teamscale Generic Findings"),

	/** Our own generic non-code metric format.  */
	GENERIC_NON_CODE("Teamscale Custom Artifacts Metrics"),

	/** Parasoft C/C++text.  */
	PARASOFT_CPP_TEST("Parasoft C/C++test"),

	/**
	 * JSON Compilation Database. Compilation Databases are generated by C/C++
	 * compilers (e.g., clang) and contain included paths and initial defines.
	 *
	 * @see "https://sarcasm.github.io/notes/dev/compilation-database.html"
	 *
	 * @see "http://clang.llvm.org/docs/JSONCompilationDatabase.html"
	 */
	COMPILATION_DATABASE("JSON Compilation Database"),

	/** Mypy (static type checker for Python) findings report format.  */
	MYPY("Mypy"),

	/**
	 * Coverage report generated with the Lauterbach Trace32 tool. See section for
	 * [Supported
 	 * Upload Formats and Samples](https://docs.teamscale.com/reference/upload-formats-and-samples/) in the user guide for more information about
	 * the Lauterbach Trace32 tool. See the `trace32_example_reports.zip` for
	 * additional report examples.
	 */
	LAUTERBACH_TRACE32("Lauterbach Trace32"),

	/**
	 * jQAssistant report format.
	 */
	JQASSISTANT("jQAssistant"),

	/**
	 * NUnit (.Net unit tests) report format. Supported are NUNit versions 2.x and 3.x.
	 */
	NUNIT("NUnit"),

	/**
	 * Simulink Meta information file. A Level 5 MAT-File is an openly documented, but proprietary,
	 * binary data container format used by MATLAB software from MathWorks (MATLAB software is the IDE
	 * for Simulink models).
	 * <p>
	 * MAT files are binary files that store json-like data structures (can store any kind of meta
	 * information). For example, tracing hints from generated code back to blocks in simulink models.
	 */
	SIMULINK_MAT("Simulink MAT"),

	/**
	 * Teamscale Compact Coverage report format.
	 */
	TEAMSCALE_COMPACT_COVERAGE("Teamscale Compact Coverage"),

	/**
	 * XCResult test execution reports in JSON format. Note that uploading the *.xcresult file is not
	 * possible, as it has to be converted to JSON as described in the docs.
	 */
	XCRESULT_JSON("XCResult JSON"),

	/**
	 * Coverage reports created with the
	 * <a href= "https://www.segger.com/products/debug-probes/j-link/technology/power-profiling/">
	 * J-Link hardware profiler</a> that have been converted to a CSV with the Segger Ozone tool.
	 */
	JLINK_CSV("J-Link CSV");
}
