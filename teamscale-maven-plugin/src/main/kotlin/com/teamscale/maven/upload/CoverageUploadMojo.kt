package com.teamscale.maven.upload

import com.teamscale.maven.TeamscaleMojoBase
import org.apache.maven.plugin.MojoExecutionException
import org.apache.maven.plugin.MojoFailureException
import org.apache.maven.plugins.annotations.LifecyclePhase
import org.apache.maven.plugins.annotations.Mojo
import org.apache.maven.plugins.annotations.Parameter
import org.apache.maven.plugins.annotations.ResolutionScope
import org.apache.maven.project.MavenProject
import org.codehaus.plexus.util.xml.Xpp3Dom
import shadow.com.teamscale.client.CommitDescriptor
import shadow.com.teamscale.client.EReportFormat
import shadow.com.teamscale.client.TeamscaleClient
import java.io.File
import java.io.IOException
import java.nio.file.Path
import java.nio.file.Paths
import java.util.*

/**
 * Run this goal after the Jacoco report generation to upload them to a
 * configured Teamscale instance. The configuration can be specified in the root
 * Maven project. Offers the following functionality:
 *
 *  1. Validate Jacoco Maven plugin configuration
 *  1. Locate and upload all reports in one session
 *
 *
 * @see [Jacoco
 * Plugin](https://www.jacoco.org/jacoco/trunk/doc/maven.html)
 */
@Mojo(
	name = "upload-coverage",
	defaultPhase = LifecyclePhase.VERIFY,
	requiresDependencyResolution = ResolutionScope.RUNTIME,
	threadSafe = true
)
class CoverageUploadMojo : TeamscaleMojoBase() {
	/**
	 * The Teamscale partition name to which unit test reports will be uploaded.
	 */
	@Parameter(property = "teamscale.unitTestPartition", defaultValue = "Unit Tests")
	lateinit var unitTestPartition: String

	/**
	 * The Teamscale partition name to which integration test reports will be
	 * uploaded.
	 */
	@Parameter(property = "teamscale.integrationTestPartition", defaultValue = "Integration Tests")
	lateinit var integrationTestPartition: String

	/**
	 * The Teamscale partition name to which aggregated test reports will be
	 * uploaded.
	 */
	@Parameter(property = "teamscale.aggregatedTestPartition", defaultValue = "Aggregated Tests")
	lateinit var aggregatedTestPartition: String

	/**
	 * The output directory of the testwise coverage reports. Should only be set if
	 * testwise coverage is uploaded.
	 */
	@Parameter
	lateinit var testwiseCoverageOutputFolder: String

	/**
	 * The Teamscale partition name to which testwise coverage reports will be
	 * uploaded.
	 */
	@Parameter(property = "teamscale.testwisePartition", defaultValue = "Testwise Coverage")
	lateinit var testwisePartition: String

	/**
	 * Paths to all reports generated by subprojects
	 *
	 * @see [report](https://www.jacoco.org/jacoco/trunk/doc/report-mojo.html)
	 */
	private val reportGoalOutputFiles = mutableListOf<Path>()

	/**
	 * Paths to all integration reports generated by subprojects
	 *
	 * @see [report-integration](https://www.jacoco.org/jacoco/trunk/doc/report-integration-mojo.html)
	 */
	private val reportIntegrationGoalOutputFiles = mutableListOf<Path>()

	/**
	 * The project build directory (usually: `./target`). Provided
	 * automatically by Maven.
	 */
	@Parameter(defaultValue = "\${project.build.directory}")
	lateinit var projectBuildDir: String

	/**
	 * Paths to all aggregated reports generated by subprojects
	 *
	 * @see [report-aggregate](https://www.jacoco.org/jacoco/trunk/doc/report-aggregate-mojo.html)
	 */
	private val reportAggregateGoalOutputFiles = mutableListOf<Path>()

	/**
	 * The Teamscale client that is used to upload reports to a Teamscale instance.
	 */
	private lateinit var teamscaleClient: TeamscaleClient

	@Throws(MojoFailureException::class, MojoExecutionException::class)
	override fun execute() {
		super.execute()
		if (skip) {
			log.debug("Skipping since skip is set to true")
			return
		}
		if (session.currentProject != session.topLevelProject) {
			log.debug("Skipping since upload should only happen in top project")
			return
		}
		teamscaleClient = TeamscaleClient(teamscaleUrl, username, accessToken, projectId)
		log.debug("Resolving end commit")
		resolveCommitOrRevision()
		log.debug("Parsing Jacoco plugin configurations")
		parseJacocoConfiguration()
		try {
			log.debug("Uploading coverage reports")
			uploadCoverageReports()
		} catch (e: IOException) {
			throw MojoFailureException(
				"Uploading coverage reports failed. No upload to Teamscale was performed. You can try again or upload the XML coverage reports manually, see https://docs.teamscale.com/reference/ui/project/project/#manual-report-upload",
				e
			)
		}
	}

	/**
	 * Check that Jacoco is set up correctly and read any custom settings that may
	 * have been set
	 *
	 * @throws MojoFailureException
	 * If Jacoco is not set up correctly
	 */
	@Throws(MojoFailureException::class)
	private fun parseJacocoConfiguration() {
		collectReportOutputDirectory(session.topLevelProject, "report", "jacoco", reportGoalOutputFiles)
		collectReportOutputDirectory(
			session.topLevelProject,
			"report-integration",
			"jacoco-it",
			reportIntegrationGoalOutputFiles
		)
		collectReportOutputDirectory(
			session.topLevelProject,
			"report-aggregate",
			"jacoco-aggregate",
			reportAggregateGoalOutputFiles
		)
		log.debug("Found ${session.topLevelProject.collectedProjects.size} sub-modules")
		session.topLevelProject.collectedProjects.forEach { subProject ->
			collectReportOutputDirectory(subProject, "report", "jacoco", reportGoalOutputFiles)
			collectReportOutputDirectory(
				subProject,
				"report-integration",
				"jacoco-it",
				reportIntegrationGoalOutputFiles
			)
			collectReportOutputDirectory(
				subProject,
				"report-aggregate",
				"jacoco-aggregate",
				reportAggregateGoalOutputFiles
			)
		}
	}

	/**
	 * Collect the file locations in which JaCoCo is configured to save the XML
	 * coverage reports
	 *
	 * @param project
	 * The project
	 * @param reportGoal
	 * The JaCoCo report goal
	 * @param jacocoDirectory
	 * The name of the directory, matching the JaCoCo goal
	 * @see [Goals](https://www.eclemma.org/jacoco/trunk/doc/maven.html)
	 */
	@Throws(MojoFailureException::class)
	private fun collectReportOutputDirectory(
		project: MavenProject,
		reportGoal: String,
		jacocoDirectory: String,
		reportOutputFiles: MutableList<Path>
	) {
		val defaultOutputDirectory = Paths.get(project.model.reporting.outputDirectory)
		// If a Dom is null it means the execution goal uses default parameters which work correctly
		val reportConfigurationDom = getJacocoGoalExecutionConfiguration(project, reportGoal)
		if (!validateReportFormat(reportConfigurationDom)) {
			val errorMessage = "Skipping upload for ${project.name} as $JACOCO_PLUGIN_NAME is not configured to produce XML reports for goal ${jacocoDirectory}. See https://www.jacoco.org/jacoco/trunk/doc/report-mojo.html#formats"
			throw MojoFailureException(errorMessage)
		}
		val resolvedCoverageFile = getCustomOutputDirectory(reportConfigurationDom)
			?: defaultOutputDirectory.resolve(jacocoDirectory).resolve("jacoco.xml")
		log.debug("Adding possible report location: $resolvedCoverageFile")
		reportOutputFiles.add(resolvedCoverageFile)
	}

	@Throws(IOException::class)
	private fun uploadCoverageReports() {
		val reportPath = if (testwiseCoverageOutputFolder.isBlank()) {
			Paths.get(projectBuildDir, "tia", "reports")
		} else {
			Paths.get(testwiseCoverageOutputFolder)
		}
		reportPath.toFile().listFiles { obj -> obj.isFile }?.let { files ->
			val testwiseCoverageFiles = listOf(*files)
			log.debug("Uploading testwise coverage to partition $testwisePartition")
			uploadCoverage(testwiseCoverageFiles.map { it.toPath() }, testwisePartition, EReportFormat.TESTWISE_COVERAGE)
		}
		uploadCoverage(reportGoalOutputFiles, unitTestPartition, EReportFormat.JACOCO)
		uploadCoverage(reportIntegrationGoalOutputFiles, integrationTestPartition, EReportFormat.JACOCO)
		uploadCoverage(reportAggregateGoalOutputFiles, aggregatedTestPartition, EReportFormat.JACOCO)
	}

	@Throws(IOException::class)
	private fun uploadCoverage(reportOutputFiles: List<Path>, partition: String, format: EReportFormat) {
		val reports = mutableListOf<File>()
		log.debug("Scanning through ${reportOutputFiles.size} locations for ${partition}...")
		reportOutputFiles.forEach { reportPath ->
			val report = reportPath.toFile()
			if (!report.exists()) {
				log.debug("Cannot find ${report.absolutePath}, skipping...")
				return@forEach
			}
			if (!report.canRead()) {
				log.warn("Cannot read ${report.absolutePath}, skipping!")
				return@forEach
			}
			reports.add(report)
		}
		if (reports.isNotEmpty()) {
			log.info("Uploading ${reports.size} report for project $projectId to $partition")
			teamscaleClient.uploadReports(
				format, reports, CommitDescriptor.parse(resolvedCommit), revision, repository, partition, COVERAGE_UPLOAD_MESSAGE
			)
		} else {
			log.info("Found no valid reports for $partition")
		}
	}

	/**
	 * Validates that a configuration Dom is set up to generate XML reports
	 *
	 * @param configurationDom
	 * The configuration Dom of a goal execution
	 */
	private fun validateReportFormat(configurationDom: Xpp3Dom?): Boolean {
		if (configurationDom?.getChild("formats") == null) {
			return true
		}
		for (format in configurationDom.getChild("formats").children) {
			if (format.value == "XML") {
				return true
			}
		}
		return false
	}

	private fun getCustomOutputDirectory(configurationDom: Xpp3Dom?) =
		configurationDom?.getChild("outputDirectory")?.let {
			Paths.get(it.value)
		}

	private fun getJacocoGoalExecutionConfiguration(project: MavenProject, pluginGoal: String) =
		project.getExecutionConfigurationDom(JACOCO_PLUGIN_NAME, pluginGoal)

	companion object {
		private const val JACOCO_PLUGIN_NAME = "org.jacoco:jacoco-maven-plugin"

		private const val COVERAGE_UPLOAD_MESSAGE = "Coverage upload via Teamscale Maven plugin"
	}
}
